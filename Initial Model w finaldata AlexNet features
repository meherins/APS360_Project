{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["qpShg0AyuQM-"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"d2b43c5e8d3641b0ba5b59a8a231cacc":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_403dc84828d246dbb9edb984fa4f924d","IPY_MODEL_5dab57aa5af642d3bae33ea773032cea","IPY_MODEL_29a2a075c3e04a158073ae7f9c3ba5c7"],"layout":"IPY_MODEL_e0d1ef92674e4511a3f4a7d2caff3e6c"}},"403dc84828d246dbb9edb984fa4f924d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_63cf1618d11949a2a43774f5ddc1844e","placeholder":"​","style":"IPY_MODEL_930386584b3a4f10b77ea1cfb527fee7","value":"100%"}},"5dab57aa5af642d3bae33ea773032cea":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_ead6ab4dc4ae4cccafa46635d8bfc88a","max":244408911,"min":0,"orientation":"horizontal","style":"IPY_MODEL_d033e9af5ba044959ac7172a1859f81f","value":244408911}},"29a2a075c3e04a158073ae7f9c3ba5c7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ab72dcf51bea4f85a9492dce3a45a932","placeholder":"​","style":"IPY_MODEL_147516ab772e4d22a363c612a78f83c3","value":" 233M/233M [00:05&lt;00:00, 43.8MB/s]"}},"e0d1ef92674e4511a3f4a7d2caff3e6c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"63cf1618d11949a2a43774f5ddc1844e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"930386584b3a4f10b77ea1cfb527fee7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ead6ab4dc4ae4cccafa46635d8bfc88a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d033e9af5ba044959ac7172a1859f81f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ab72dcf51bea4f85a9492dce3a45a932":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"147516ab772e4d22a363c612a78f83c3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# import & mount"],"metadata":{"id":"qpShg0AyuQM-"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"KzUoXfjuuHEZ"},"outputs":[],"source":["import matplotlib\n","import matplotlib.pyplot as plt  # Most common visualization package that a lot of others are based on\n","\n","import numpy as np  # Common package for numerical methods\n","import pandas as pd  # Common package for data storeage/manipulation\n","import seaborn as sns  # Common package for statistical visualizations\n","import datetime\n","\n","from IPython.display import SVG\n","from graphviz import Source\n","\n","# Import useful packages from sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import export_graphviz\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import cross_validate\n","from sklearn.linear_model import LogisticRegressionCV\n","from sklearn.cluster import KMeans\n","from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n","from sklearn.feature_selection import SelectKBest, f_classif\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import precision_score, recall_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.tree import DecisionTreeClassifier\n","\n","# Torch and Time!\n","import time\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import torchvision\n","from torch.utils.data.sampler import SubsetRandomSampler\n","import torchvision.transforms as transforms\n","\n","# Import portion of a package\n","import scipy.stats as stats\n","from sklearn.impute import SimpleImputer as Imputer  # Specific function from common machine learning package\n","\n","# import download to export .csv files\n","from google.colab import files\n","\n","from PIL import ImageFile"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rqgtWKnUuWiL","executionInfo":{"status":"ok","timestamp":1679093900020,"user_tz":240,"elapsed":18435,"user":{"displayName":"Sakib Junaed","userId":"14809681483089785181"}},"outputId":"7ad34e10-a5c2-43b7-850d-9507c3f00929"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["import torchvision.models\n","alexnet = torchvision.models.alexnet(pretrained=True)\n","import os"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156,"referenced_widgets":["d2b43c5e8d3641b0ba5b59a8a231cacc","403dc84828d246dbb9edb984fa4f924d","5dab57aa5af642d3bae33ea773032cea","29a2a075c3e04a158073ae7f9c3ba5c7","e0d1ef92674e4511a3f4a7d2caff3e6c","63cf1618d11949a2a43774f5ddc1844e","930386584b3a4f10b77ea1cfb527fee7","ead6ab4dc4ae4cccafa46635d8bfc88a","d033e9af5ba044959ac7172a1859f81f","ab72dcf51bea4f85a9492dce3a45a932","147516ab772e4d22a363c612a78f83c3"]},"id":"535zYpMrucHc","executionInfo":{"status":"ok","timestamp":1679093925341,"user_tz":240,"elapsed":6751,"user":{"displayName":"Sakib Junaed","userId":"14809681483089785181"}},"outputId":"d345acf7-fcc8-4034-b82f-0ae1bd6d71cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/alexnet-owt-7be5be79.pth\" to /root/.cache/torch/hub/checkpoints/alexnet-owt-7be5be79.pth\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/233M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d2b43c5e8d3641b0ba5b59a8a231cacc"}},"metadata":{}}]},{"cell_type":"markdown","source":["#CNN for the AlexNet Features"],"metadata":{"id":"eLtn4GCPwWsB"}},{"cell_type":"code","source":["class AlexClassifier(nn.Module):\n","    # Taken largely from Tut 3a\n","    def __init__(self):\n","        super(AlexClassifier, self).__init__()\n","        self.name = \"Alex\"\n","        self.fc1 = nn.Linear(256 * 6 * 6, 1024) \n","        self.fc2 = nn.Linear(1024, 65)\n","\n","    def forward(self, x):\n","        x = x.view(-1, 256 * 6 * 6)\n","        x = F.relu(self.fc1(x))\n","        x = self.fc2(x)\n","        return x  \n","\n","class ANN(nn.Module):\n","  def __init__(self):\n","    super(ANN, self).__init__()\n","    self.name = 'ANN'\n","    self.layer1 = nn.Linear(256*6*6, 500) #take alexnet features as input\n","    self.layer2 = nn.Linear(500, 250)\n","    self.layer3 = nn.Linear(250, 65)\n","  def forward(self, x):\n","    x = x.view(-1, 256*6*6)\n","    x = F.relu(self.layer1(x))\n","    x = F.relu(self.layer2(x))\n","    x = self.layer3(x)\n","    return x"],"metadata":{"id":"l2ZmzRqowa1V"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_accuracy(model, loader):\n","    # changed to pass in our data!\n","\n","    correct = 0\n","    total = 0\n","    for imgs, labels in loader:\n","        \n","        \n","        #############################################\n","        #To Enable GPU Usage\n","        # use_cuda is a flag!\n","        # we also check if the cuda library is available\n","        if use_cuda and torch.cuda.is_available():\n","          imgs = imgs.cuda()\n","          labels = labels.cuda()\n","        #############################################\n","        \n","        \n","        output = model(imgs)\n","        \n","        #select index with maximum prediction score\n","        pred = output.max(1, keepdim=True)[1]\n","        correct += pred.eq(labels.view_as(pred)).sum().item()\n","        total += imgs.shape[0]\n","    return correct / total"],"metadata":{"id":"M109qiR1wqhA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_model_name(name, batch_size, learning_rate, epoch):\n","    \"\"\" Generate a name for the model consisting of all the hyperparameter values\n","\n","    Args:\n","        config: Configuration object containing the hyperparameters\n","    Returns:\n","        path: A string with the hyperparameter name and value concatenated\n","    \"\"\"\n","    path = \"model_{0}_bs{1}_lr{2}_epoch{3}\".format(name,\n","                                                   batch_size,\n","                                                   learning_rate,\n","                                                   epoch)\n","    return path"],"metadata":{"id":"diPp6iNcw3yR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["training code"],"metadata":{"id":"lMTstoM9xKVT"}},{"cell_type":"code","source":["# weird mishmash of tut 3a and lab 2 code!\n","# TRIANING CODE!\n","\n","def train(model, train_loader, val_loader, batch_size=64, learning_rate = 0.005, num_epochs=30, momentum=0.9):\n","    print(\"Start\")\n","    torch.manual_seed(1000)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum) #Try changing maybe\n","\n","    iters, losses, train_acc, val_acc = [], [], [], []\n","\n","    print(\"Start Training\")\n","    # training\n","    n = 0 # the number of iterations\n","    ########################################################################\n","    # Train the network\n","    start_time = time.time()\n","    for epoch in range(num_epochs):\n","        for imgs, labels in iter(train_loader):\n","          \n","            #############################################\n","            #To Enable GPU Usage\n","            if use_cuda and torch.cuda.is_available():\n","                imgs = imgs.cuda()\n","                labels = labels.cuda()\n","            #############################################\n","            \n","              \n","            out = model(imgs)             # forward pass\n","            loss = criterion(out, labels) # compute the total loss\n","            loss.backward()               # backward pass (compute parameter updates)\n","            optimizer.step()              # make the updates for each parameter\n","            optimizer.zero_grad()         # a clean up step for PyTorch\n","\n","            # save the current training information\n","            iters.append(n)\n","            losses.append(float(loss)/batch_size)             # compute *average* loss\n","            n += 1\n","        #print(\"Epoch Complete\")\n","\n","        train_acc.append(get_accuracy(model, train_loader)) # compute training accuracy \n","        val_acc.append(get_accuracy(model, val_loader))  # compute validation accuracy\n","        print((\"Epoch {}: Train acc: {} |\"+\n","        \"Validation acc: {}\").format(\n","            epoch + 1,\n","            train_acc[epoch],\n","            val_acc[epoch]))\n","        model_path = get_model_name(model.name, batch_size, learning_rate, epoch)\n","        torch.save(model.state_dict(), model_path)   \n","        print(\"Epoch Time: {:.2f} seconds\".format(time.time() - start_time))\n","        start_time = time.time()\n","    print('Finished Training')\n","    # Write the train/test loss/err into CSV file for plotting later\n","    epochs = np.arange(1, num_epochs + 1)\n","\n","    # plotting\n","\n","    epochs_range = range(1, num_epochs + 1)\n","\n","\n","    plt.title(\"Training Curve\")\n","    plt.plot(iters, losses, label=\"Train\")\n","    plt.xlabel(\"Iterations\")\n","    plt.ylabel(\"Loss\")\n","    plt.show()\n","\n","    plt.title(\"Training Curve\")\n","    plt.plot(epochs_range, train_acc, label=\"Train\")\n","    plt.plot(epochs_range, val_acc, label=\"Validation\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Training Accuracy\")\n","    plt.legend(loc='best')\n","    plt.show()\n","\n","    print(\"Final Training Accuracy: {}\".format(train_acc[-1]))\n","    print(\"Final Validation Accuracy: {}\".format(val_acc[-1]))"],"metadata":{"id":"Ym7mPIuYw6Pi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/train'\n","val_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/val'\n","test_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/test'\n","\n","use_cuda = True\n","\n","batch_size = 40\n","\n","alex_train_data = torchvision.datasets.DatasetFolder(train_path, loader=torch.load, extensions=('.tensor'))\n","alex_train_loader = torch.utils.data.DataLoader(alex_train_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","alex_val_data = torchvision.datasets.DatasetFolder(val_path, loader=torch.load, extensions=('.tensor'))\n","alex_val_loader = torch.utils.data.DataLoader(alex_val_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","\n","alex_test_data = torchvision.datasets.DatasetFolder(test_path, loader=torch.load, extensions=('.tensor'))\n","alex_test_loader = torch.utils.data.DataLoader(alex_test_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","alex = AlexClassifier()\n","cnn = ANN()\n","if use_cuda and torch.cuda.is_available():\n","    print(\"Using Cuda (GPU!)\")\n","    cnn.cuda()\n","\n","train(model = cnn, batch_size = batch_size, train_loader = alex_train_loader, val_loader = alex_val_loader, num_epochs=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Tg2v7mkVw-mD","executionInfo":{"status":"ok","timestamp":1679095431305,"user_tz":240,"elapsed":1309355,"user":{"displayName":"Sakib Junaed","userId":"14809681483089785181"}},"outputId":"cd67ec82-3690-4491-94d3-7e7c753156f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Start\n","Start Training\n","Epoch 1: Train acc: 0.46076923076923076 |Validation acc: 0.3869230769230769\n","Epoch Time: 1096.98 seconds\n","Epoch 2: Train acc: 0.7351282051282051 |Validation acc: 0.5984615384615385\n","Epoch Time: 23.62 seconds\n","Epoch 3: Train acc: 0.857948717948718 |Validation acc: 0.6538461538461539\n","Epoch Time: 20.77 seconds\n","Epoch 4: Train acc: 0.936923076923077 |Validation acc: 0.6961538461538461\n","Epoch Time: 21.11 seconds\n","Epoch 5: Train acc: 0.9648717948717949 |Validation acc: 0.71\n","Epoch Time: 20.47 seconds\n","Epoch 6: Train acc: 0.9843589743589743 |Validation acc: 0.74\n","Epoch Time: 21.11 seconds\n","Epoch 7: Train acc: 0.9969230769230769 |Validation acc: 0.7538461538461538\n","Epoch Time: 20.73 seconds\n","Epoch 8: Train acc: 0.9997435897435898 |Validation acc: 0.7553846153846154\n","Epoch Time: 21.26 seconds\n","Epoch 9: Train acc: 1.0 |Validation acc: 0.7592307692307693\n","Epoch Time: 20.17 seconds\n","Epoch 10: Train acc: 1.0 |Validation acc: 0.76\n","Epoch Time: 21.32 seconds\n","Finished Training\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Final Training Accuracy: 1.0\n","Final Validation Accuracy: 0.76\n"]}]},{"cell_type":"code","source":["get_accuracy(cnn, alex_test_loader)"],"metadata":{"id":"CbaabDhrkKMY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679095894847,"user_tz":240,"elapsed":271064,"user":{"displayName":"Sakib Junaed","userId":"14809681483089785181"}},"outputId":"9d5a57f2-556f-40f4-830b-3c43f148526b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7792307692307693"]},"metadata":{},"execution_count":13}]}]}