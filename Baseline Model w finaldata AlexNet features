{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["qpShg0AyuQM-"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"db977d13d9274af39fdf3df15bc9dda5":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2786366d3c064c1cbf1b92d0978deaaf","IPY_MODEL_e9ee0768ffe44edca52f5bbf45b75203","IPY_MODEL_9329f577d27e4dbca741f81864fcac4a"],"layout":"IPY_MODEL_dfdc9bb8cd934484abbcf38d92daee89"}},"2786366d3c064c1cbf1b92d0978deaaf":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e834b4ef07014fad85ee39501476c1e1","placeholder":"​","style":"IPY_MODEL_f0457310a1e748a99e6c3469fc965ef6","value":"100%"}},"e9ee0768ffe44edca52f5bbf45b75203":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_1515c19dd7a5481a8bc9605fa6d05892","max":244408911,"min":0,"orientation":"horizontal","style":"IPY_MODEL_267873f13c784c838f309659fa6847ed","value":244408911}},"9329f577d27e4dbca741f81864fcac4a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_eed319e904234a4eacc44f5306c6fc44","placeholder":"​","style":"IPY_MODEL_163938e31f7a4c60881a0d9e9663cf40","value":" 233M/233M [00:03&lt;00:00, 76.1MB/s]"}},"dfdc9bb8cd934484abbcf38d92daee89":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e834b4ef07014fad85ee39501476c1e1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f0457310a1e748a99e6c3469fc965ef6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1515c19dd7a5481a8bc9605fa6d05892":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"267873f13c784c838f309659fa6847ed":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"eed319e904234a4eacc44f5306c6fc44":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"163938e31f7a4c60881a0d9e9663cf40":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# import & mount"],"metadata":{"id":"qpShg0AyuQM-"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"KzUoXfjuuHEZ","executionInfo":{"status":"ok","timestamp":1679092225943,"user_tz":240,"elapsed":11361,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}}},"outputs":[],"source":["import matplotlib\n","import matplotlib.pyplot as plt  # Most common visualization package that a lot of others are based on\n","\n","import numpy as np  # Common package for numerical methods\n","import pandas as pd  # Common package for data storeage/manipulation\n","import seaborn as sns  # Common package for statistical visualizations\n","import datetime\n","\n","from IPython.display import SVG\n","from graphviz import Source\n","\n","# Import useful packages from sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.tree import export_graphviz\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import cross_validate\n","from sklearn.linear_model import LogisticRegressionCV\n","from sklearn.cluster import KMeans\n","from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n","from sklearn.feature_selection import SelectKBest, f_classif\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import precision_score, recall_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.tree import DecisionTreeClassifier\n","\n","# Torch and Time!\n","import time\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","import torchvision\n","from torch.utils.data.sampler import SubsetRandomSampler\n","import torchvision.transforms as transforms\n","\n","# Import portion of a package\n","import scipy.stats as stats\n","from sklearn.impute import SimpleImputer as Imputer  # Specific function from common machine learning package\n","\n","# import download to export .csv files\n","from google.colab import files\n","\n","from PIL import ImageFile"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rqgtWKnUuWiL","executionInfo":{"status":"ok","timestamp":1679092258033,"user_tz":240,"elapsed":32101,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}},"outputId":"786a7292-a595-4559-ee7c-7b02b19f760e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["import torchvision.models\n","alexnet = torchvision.models.alexnet(pretrained=True)\n","import os"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":214,"referenced_widgets":["db977d13d9274af39fdf3df15bc9dda5","2786366d3c064c1cbf1b92d0978deaaf","e9ee0768ffe44edca52f5bbf45b75203","9329f577d27e4dbca741f81864fcac4a","dfdc9bb8cd934484abbcf38d92daee89","e834b4ef07014fad85ee39501476c1e1","f0457310a1e748a99e6c3469fc965ef6","1515c19dd7a5481a8bc9605fa6d05892","267873f13c784c838f309659fa6847ed","eed319e904234a4eacc44f5306c6fc44","163938e31f7a4c60881a0d9e9663cf40"]},"id":"535zYpMrucHc","executionInfo":{"status":"ok","timestamp":1679092262241,"user_tz":240,"elapsed":4222,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}},"outputId":"f7bc8e08-dec5-4ae6-b6ba-5e8d5d6e129c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=AlexNet_Weights.IMAGENET1K_V1`. You can also use `weights=AlexNet_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/alexnet-owt-7be5be79.pth\" to /root/.cache/torch/hub/checkpoints/alexnet-owt-7be5be79.pth\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/233M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"db977d13d9274af39fdf3df15bc9dda5"}},"metadata":{}}]},{"cell_type":"markdown","source":["#CNN for the AlexNet Features"],"metadata":{"id":"eLtn4GCPwWsB"}},{"cell_type":"code","source":["class AlexClassifier(nn.Module):\n","    # Taken largely from Tut 3a\n","    def __init__(self):\n","        super(AlexClassifier, self).__init__()\n","        self.name = \"Alex\"\n","        self.fc1 = nn.Linear(256 * 6 * 6, 1024) \n","        self.fc2 = nn.Linear(1024, 65)\n","\n","    def forward(self, x):\n","        x = x.view(-1, 256 * 6 * 6)\n","        x = F.relu(self.fc1(x))\n","        x = self.fc2(x)\n","        return x  "],"metadata":{"id":"l2ZmzRqowa1V","executionInfo":{"status":"ok","timestamp":1679092264064,"user_tz":240,"elapsed":142,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def get_accuracy(model, loader):\n","    # changed to pass in our data!\n","\n","    correct = 0\n","    total = 0\n","    for imgs, labels in loader:\n","        \n","        \n","        #############################################\n","        #To Enable GPU Usage\n","        # use_cuda is a flag!\n","        # we also check if the cuda library is available\n","        if use_cuda and torch.cuda.is_available():\n","          imgs = imgs.cuda()\n","          labels = labels.cuda()\n","        #############################################\n","        \n","        \n","        output = model(imgs)\n","        \n","        #select index with maximum prediction score\n","        pred = output.max(1, keepdim=True)[1]\n","        correct += pred.eq(labels.view_as(pred)).sum().item()\n","        total += imgs.shape[0]\n","    return correct / total"],"metadata":{"id":"M109qiR1wqhA","executionInfo":{"status":"ok","timestamp":1679092265459,"user_tz":240,"elapsed":183,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["def get_model_name(name, batch_size, learning_rate, epoch):\n","    \"\"\" Generate a name for the model consisting of all the hyperparameter values\n","\n","    Args:\n","        config: Configuration object containing the hyperparameters\n","    Returns:\n","        path: A string with the hyperparameter name and value concatenated\n","    \"\"\"\n","    path = \"model_{0}_bs{1}_lr{2}_epoch{3}\".format(name,\n","                                                   batch_size,\n","                                                   learning_rate,\n","                                                   epoch)\n","    return path"],"metadata":{"id":"diPp6iNcw3yR","executionInfo":{"status":"ok","timestamp":1679092267482,"user_tz":240,"elapsed":168,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["training code"],"metadata":{"id":"lMTstoM9xKVT"}},{"cell_type":"code","source":["# weird mishmash of tut 3a and lab 2 code!\n","# TRIANING CODE!\n","\n","def train(model, train_loader, val_loader, batch_size=64, learning_rate = 0.005, num_epochs=30, momentum=0.9):\n","    print(\"Start\")\n","    torch.manual_seed(1000)\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum) #Try changing maybe\n","\n","    iters, losses, train_acc, val_acc = [], [], [], []\n","\n","    print(\"Start Training\")\n","    # training\n","    n = 0 # the number of iterations\n","    ########################################################################\n","    # Train the network\n","    start_time = time.time()\n","    for epoch in range(num_epochs):\n","        for imgs, labels in iter(train_loader):\n","          \n","            #############################################\n","            #To Enable GPU Usage\n","            if use_cuda and torch.cuda.is_available():\n","                imgs = imgs.cuda()\n","                labels = labels.cuda()\n","            #############################################\n","            \n","              \n","            out = model(imgs)             # forward pass\n","            loss = criterion(out, labels) # compute the total loss\n","            loss.backward()               # backward pass (compute parameter updates)\n","            optimizer.step()              # make the updates for each parameter\n","            optimizer.zero_grad()         # a clean up step for PyTorch\n","\n","            # save the current training information\n","            iters.append(n)\n","            losses.append(float(loss)/batch_size)             # compute *average* loss\n","            n += 1\n","        #print(\"Epoch Complete\")\n","\n","        train_acc.append(get_accuracy(model, train_loader)) # compute training accuracy \n","        val_acc.append(get_accuracy(model, val_loader))  # compute validation accuracy\n","        print((\"Epoch {}: Train acc: {} |\"+\n","        \"Validation acc: {}\").format(\n","            epoch + 1,\n","            train_acc[epoch],\n","            val_acc[epoch]))\n","        model_path = get_model_name(model.name, batch_size, learning_rate, epoch)\n","        torch.save(model.state_dict(), model_path)   \n","        print(\"Epoch Time: {:.2f} seconds\".format(time.time() - start_time))\n","        start_time = time.time()\n","    print('Finished Training')\n","    # Write the train/test loss/err into CSV file for plotting later\n","    epochs = np.arange(1, num_epochs + 1)\n","\n","    # plotting\n","\n","    epochs_range = range(1, num_epochs + 1)\n","\n","\n","    plt.title(\"Training Curve\")\n","    plt.plot(iters, losses, label=\"Train\")\n","    plt.xlabel(\"Iterations\")\n","    plt.ylabel(\"Loss\")\n","    plt.show()\n","\n","    plt.title(\"Training Curve\")\n","    plt.plot(epochs_range, train_acc, label=\"Train\")\n","    plt.plot(epochs_range, val_acc, label=\"Validation\")\n","    plt.xlabel(\"Epochs\")\n","    plt.ylabel(\"Training Accuracy\")\n","    plt.legend(loc='best')\n","    plt.show()\n","\n","    print(\"Final Training Accuracy: {}\".format(train_acc[-1]))\n","    print(\"Final Validation Accuracy: {}\".format(val_acc[-1]))"],"metadata":{"id":"Ym7mPIuYw6Pi","executionInfo":{"status":"ok","timestamp":1679092268828,"user_tz":240,"elapsed":158,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["train_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/train'\n","val_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/val'\n","test_path = '/content/gdrive/My Drive/APS360 Project/Alex_Net_Features_FinalDataset/test'\n","\n","use_cuda = True\n","\n","batch_size = 40\n","\n","alex_train_data = torchvision.datasets.DatasetFolder(train_path, loader=torch.load, extensions=('.tensor'))\n","alex_train_loader = torch.utils.data.DataLoader(alex_train_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","alex_val_data = torchvision.datasets.DatasetFolder(val_path, loader=torch.load, extensions=('.tensor'))\n","alex_val_loader = torch.utils.data.DataLoader(alex_val_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","\n","alex_test_data = torchvision.datasets.DatasetFolder(test_path, loader=torch.load, extensions=('.tensor'))\n","alex_test_loader = torch.utils.data.DataLoader(alex_test_data, batch_size=batch_size, num_workers=1, shuffle=True)\n","\n","alex = AlexClassifier()\n","if use_cuda and torch.cuda.is_available():\n","    print(\"Using Cuda (GPU!)\")\n","    alex.cuda()\n","\n","train(model = alex, batch_size = batch_size, train_loader = alex_train_loader, val_loader = alex_val_loader, num_epochs=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Tg2v7mkVw-mD","executionInfo":{"status":"ok","timestamp":1679093739447,"user_tz":240,"elapsed":1,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}},"outputId":"a232c9fd-b2a2-41d9-a3ba-9c12b02cced6"},"execution_count":8,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Start\n","Start Training\n","Epoch 1: Train acc: 0.7287179487179487 |Validation acc: 0.6\n","Epoch Time: 1217.43 seconds\n","Epoch 2: Train acc: 0.9251282051282051 |Validation acc: 0.7323076923076923\n","Epoch Time: 28.36 seconds\n","Epoch 3: Train acc: 0.9664102564102565 |Validation acc: 0.7330769230769231\n","Epoch Time: 22.28 seconds\n","Epoch 4: Train acc: 0.9941025641025641 |Validation acc: 0.7723076923076924\n","Epoch Time: 20.36 seconds\n","Epoch 5: Train acc: 0.9997435897435898 |Validation acc: 0.7753846153846153\n","Epoch Time: 22.32 seconds\n","Epoch 6: Train acc: 0.9948717948717949 |Validation acc: 0.7769230769230769\n","Epoch Time: 20.27 seconds\n","Epoch 7: Train acc: 1.0 |Validation acc: 0.7784615384615384\n","Epoch Time: 21.36 seconds\n","Epoch 8: Train acc: 1.0 |Validation acc: 0.7915384615384615\n","Epoch Time: 23.62 seconds\n","Epoch 9: Train acc: 1.0 |Validation acc: 0.7938461538461539\n","Epoch Time: 27.51 seconds\n","Epoch 10: Train acc: 1.0 |Validation acc: 0.7992307692307692\n","Epoch Time: 26.80 seconds\n","Finished Training\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Final Training Accuracy: 1.0\n","Final Validation Accuracy: 0.7992307692307692\n"]}]},{"cell_type":"code","source":["get_accuracy(alex, alex_test_loader)"],"metadata":{"id":"CbaabDhrkKMY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1679094058619,"user_tz":240,"elapsed":231179,"user":{"displayName":"Madeline Lee","userId":"09159153056267545522"}},"outputId":"a53d826d-cbca-4d8f-9226-e3d91bd46d8f"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7907692307692308"]},"metadata":{},"execution_count":9}]}]}